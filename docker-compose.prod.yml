version: "3.8"

services:
  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - queueme_network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U queueme"]
      interval: 30s
      timeout: 5s
      retries: 3

  redis:
    image: redis:6-alpine
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - queueme_network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  web:
    build:
      context: .
      dockerfile: Dockerfile
    command: gunicorn queueme.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 2
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    env_file:
      - ./.env
    depends_on:
      - db
      - redis
    networks:
      - queueme_network
    restart: always

  celery:
    build:
      context: .
      dockerfile: Dockerfile.celery
    command: celery -A queueme worker -l INFO --concurrency=4
    env_file:
      - ./.env
    depends_on:
      - db
      - redis
    networks:
      - queueme_network
    restart: always

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.celery
    command: celery -A queueme beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file:
      - ./.env
    depends_on:
      - db
      - redis
    networks:
      - queueme_network
    restart: always

  daphne:
    build:
      context: .
      dockerfile: Dockerfile
    command: daphne -b 0.0.0.0 -p 8001 queueme.asgi:application
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    env_file:
      - ./.env
    depends_on:
      - db
      - redis
    networks:
      - queueme_network
    restart: always

  nginx:
    image: nginx:1.21-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./config/nginx:/etc/nginx/conf.d
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - web
      - daphne
    networks:
      - queueme_network
    restart: always

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

networks:
  queueme_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
