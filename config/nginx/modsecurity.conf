# ModSecurity configuration for QueueMe

# -- Rule engine initialization ----------------------------------------------

# Enable ModSecurity, attaching it to every transaction.
SecRuleEngine On

# -- Request body handling ---------------------------------------------------

# Allow ModSecurity to access request bodies.
SecRequestBodyAccess On

# Enable XML request body parser.
SecRule REQUEST_HEADERS:Content-Type "(?:application(?:/soap\+|/)|text/)xml" \
     "id:'200000',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=XML"

# Enable JSON request body parser.
SecRule REQUEST_HEADERS:Content-Type "application/json" \
     "id:'200001',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON"

# Maximum request body size we will accept for buffering.
SecRequestBodyLimit 13107200
SecRequestBodyNoFilesLimit 131072

# What to do if the request body is larger than the limit.
SecRequestBodyLimitAction Reject

# -- Response body handling --------------------------------------------------

# Allow ModSecurity to access response bodies.
SecResponseBodyAccess On

# Which response MIME types do we want to inspect?
SecResponseBodyMimeType text/plain text/html text/xml application/json

# Buffer response bodies of up to 512 KB in length.
SecResponseBodyLimit 524288

# What to do if the response body is larger than the limit.
SecResponseBodyLimitAction ProcessPartial

# -- Filesystem configuration ------------------------------------------------

# The location where ModSecurity stores temporary files (for example, when
# it needs to handle a file upload that is larger than the configured limit).
SecTmpDir /tmp/

# The location where ModSecurity will keep its persistent data (e.g., IP address
# tracking, session data, etc.).
SecDataDir /tmp/

# -- File uploads handling configuration -------------------------------------

# The location where ModSecurity stores intercepted uploaded files.
SecUploadDir /tmp/

# By default, only keep the files that were determined to be unusual
# in some way.
SecUploadKeepFiles Off

# Uploaded files mime type detection.
SecUploadFileMode 0644

# -- Debug log configuration -------------------------------------------------

# The default debug log configuration is to duplicate the error, warning,
# and notice messages from the error log.
#SecDebugLog /var/log/modsec_debug.log
#SecDebugLogLevel 3

# -- Audit log configuration -------------------------------------------------

# Log the transactions that are marked by a rule, as well as those that
# trigger a server error.
SecAuditEngine RelevantOnly
SecAuditLogRelevantStatus "^(?:5|4(?!04))"

# Log everything we know about a transaction.
SecAuditLogParts ABIJDEFHZ

# Use a single file for logging.
SecAuditLogType Serial
SecAuditLog /var/log/nginx/modsec_audit.log

# -- Miscellaneous -----------------------------------------------------------

# Use a reliable and unique ID for each request.
SecUnicodeMapFile unicode.mapping 20127
SecUnicodeCodePage 20127

# Allow for relaxed rules with high volumes of traffic
SecConnEngine Off

# Block status
SecDefaultAction "phase:1,log,auditlog,deny,status:403"
SecDefaultAction "phase:2,log,auditlog,deny,status:403"

# -- Core Rule Set inclusion -------------------------------------------------
# Include OWASP CRS rules
Include /etc/nginx/modsecurity-crs/crs-setup.conf
Include /etc/nginx/modsecurity-crs/rules/*.conf

# -- Custom rules for QueueMe ------------------------------------------------

# Protect against SQL injection
SecRule REQUEST_COOKIES|REQUEST_COOKIES_NAMES|REQUEST_FILENAME|REQUEST_HEADERS|REQUEST_HEADERS_NAMES|REQUEST_METHOD|ARGS|ARGS_NAMES|XML:/* "@rx (?i:(?:\b(?:s(?:elect\b(?:.{1,100}?\b(?:(?:from|into)\b|limit\b)|.*?\btable\b)|p_(?:(?:addextendedproc|prepare)exec|execute(?:sql)?|makewebtask)|qlprepare)|(?:xp_(?:(?:reg(?:re(?:movemultistring|ad)|deletekey|writevalue)|(?:addextendedproc|execresultset)exec|terminate)|prepare(?:(?:ex|sql)execute)|execute(?:sql)?))|e(?:xecute(?:sql)?|xp_(?:dirtree|regread))|d(?:b(?:a_(?:addextendedproc|forwardfile)|ms_java)|elete\b\W*?\bfrom)|u(?:nion\b.*?\bselect|pdate.*?\bset\b.*?=)|i(?:nsert\b\W*?\binto|nto\b\W*?\bOutFile))|;.*?(?:declare|select|create|drop|update|insert|execute|shutdown|revoke|union))|(?:\b(?:msg|nvarchar|varchar|alter|begin|commit|cursor|exec|select|union|bulk insert|waitfor|from|declare)|sys\.(?:database|tables|procedures))\b)" \
    "id:1000,phase:2,block,msg:'SQL Injection Attack',logdata:'%{MATCHED_VAR}',severity:'2'"

# Protect against XSS
SecRule REQUEST_COOKIES|REQUEST_COOKIES_NAMES|REQUEST_HEADERS|ARGS|ARGS_NAMES|REQUEST_FILENAME "@rx (?i:<script.*?>|<.*?javascript:.*?>|<.*?\\s+on(?:error|mouse|load|unload|click|dblclick|mousedown|mouseup|mouseover|mousemove|mouseout|focus|blur|select|change|submit|reset)\\s*=.*?>)" \
    "id:1001,phase:2,block,msg:'XSS Attack',logdata:'%{MATCHED_VAR}',severity:'2'"

# Protect against file inclusion
SecRule ARGS "@rx (?:\\.\\.[\\/\\\\].*|\\.\\/|\\\\\\.\\\\.[\\/\\\\].*|\\/\\.\\.\\/)" \
    "id:1002,phase:2,block,msg:'Directory Traversal Attack',logdata:'%{MATCHED_VAR}',severity:'2'"

# Protect against command injection
SecRule ARGS "@rx (?:;|\||\`|\\$\\(|\\$\\{|\\/bin\\/|\\/usr\\/bin\\/)" \
    "id:1003,phase:2,block,msg:'OS Command Injection',logdata:'%{MATCHED_VAR}',severity:'2'"

# Protect admin paths with stricter rules
SecRule REQUEST_URI "@beginsWith /admin/" \
    "id:1004,phase:1,chain,nolog,pass"
SecRule &REMOTE_ADDR "@eq 1" \
    "ctl:ruleEngine=On,ctl:auditEngine=On"

# Protect against known malicious bots
SecRule REQUEST_HEADERS:User-Agent "@rx (?:acunetix|analyzer|winhttp|HTTrack|clshttp|libwww|wget|curl|harvest|extract|grab|miner|nikto|scan|vulnerability|shell|git)" \
    "id:1005,phase:1,block,msg:'Malicious Bot or Scanner',logdata:'%{MATCHED_VAR}',severity:'2'"

# Rate limit API login attempts
SecAction "id:1006,phase:1,pass,nolog,setvar:tx.api_login_count=+1,expirevar:tx.api_login_count=60"
SecRule REQUEST_URI "@rx ^/api/v1/auth/login" "chain,id:1007,phase:1"
SecRule TX:API_LOGIN_COUNT "@gt 10" "deny,status:429,msg:'API login rate limit exceeded'"

# Deny access to sensitive files
SecRule REQUEST_URI "@rx (?:\\.env|\\.git|\\.svn|wp-config\\.php|configuration\\.php|config\\.php|\\.htaccess|\\.htpasswd|console|admin\\.php|phpinfo\\.php)" \
    "id:1008,phase:1,block,msg:'Access to Sensitive File',logdata:'%{MATCHED_VAR}',severity:'2'"

# Enforce Content-Type for API calls
SecRule REQUEST_URI "@beginsWith /api/" \
    "chain,id:1009,phase:1"
SecRule REQUEST_METHOD "!@rx ^(GET|HEAD|OPTIONS)$" \
    "chain"
SecRule REQUEST_HEADERS:Content-Type "!@rx ^application/(?:json|x-www-form-urlencoded)" \
    "deny,status:415,msg:'Invalid Content-Type for API request'"
