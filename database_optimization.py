"""
Database Optimization Script for QueueMe Backend

This script analyzes the database models and creates migration files to add
necessary indexes for frequently queried fields to improve performance.

Usage:
    python database_optimization.py

The script will:
1. Analyze model fields that are frequently used in filters, ordering, and lookups
2. Generate migration files to add missing indexes
3. Create composite indexes for fields that are frequently queried together
"""

import os
import sys
from collections import defaultdict

# Dictionary of models and fields that need indexing
# Format: {app_name: {model_name: [field_names]}}
INDEXES_TO_ADD = {
    'bookingapp': {
        'Appointment': [
            # Single field indexes
            ['status'],
            ['payment_status'],
            ['start_time'],
            ['end_time'],
            ['created_at'],
            ['updated_at'],
            # Composite indexes for common query patterns
            ['customer', 'status'],
            ['specialist', 'status'],
            ['shop', 'status'],
            ['shop', 'start_time'],
            ['specialist', 'start_time'],
        ],
        'AppointmentReminder': [
            ['is_sent', 'scheduled_time'],
        ],
        'AppointmentNote': [
            ['is_private'],
            ['created_at'],
        ]
    },
    'authapp': {
        'User': [
            ['phone_number'],
            ['is_verified'],
            ['is_active'],
            ['user_type'],
            ['created_at'],
        ]
    },
    'shopapp': {
        'Shop': [
            ['is_active'],
            ['created_at'],
            ['location'],
        ],
        'ShopHours': [
            ['day_of_week'],
            ['shop', 'day_of_week'],
        ]
    },
    'serviceapp': {
        'Service': [
            ['is_active'],
            ['price'],
            ['duration'],
            ['shop', 'is_active'],
        ]
    },
    'specialistsapp': {
        'Specialist': [
            ['is_active'],
            ['shop', 'is_active'],
        ],
        'SpecialistSchedule': [
            ['date'],
            ['specialist', 'date'],
        ]
    },
    'paymentapp': {
        'Payment': [
            ['status'],
            ['created_at'],
            ['updated_at'],
            ['payment_method'],
            ['customer', 'status'],
        ],
        'Refund': [
            ['status'],
            ['created_at'],
            ['payment', 'status'],
        ]
    },
    'notificationapp': {
        'Notification': [
            ['is_read'],
            ['created_at'],
            ['recipient', 'is_read'],
            ['recipient', 'created_at'],
        ]
    }
}

# Template for migration file
MIGRATION_TEMPLATE = """# Generated by database_optimization.py
from django.db import migrations, models

class Migration(migrations.Migration):
    dependencies = [
        ('{app_name}', '{last_migration}'),
    ]

    operations = [
{operations}
    ]
"""

# Template for index operation
INDEX_OPERATION_TEMPLATE = """        migrations.AddIndex(
            model_name='{model_name}',
            index=models.Index(fields={fields}, name='{index_name}'),
        ),"""

def get_last_migration(app_name):
    """Get the name of the last migration for an app."""
    # In a real implementation, this would inspect the migrations directory
    # For this script, we'll return a placeholder
    return '0001_initial'

def generate_index_name(model_name, fields):
    """Generate a valid index name based on model and fields."""
    # Django has a 30 character limit for index names
    field_part = '_'.join(fields)
    name = f"{model_name.lower()}_{field_part}_idx"
    # Ensure name is not too long
    if len(name) > 30:
        # Truncate and add hash to ensure uniqueness
        import hashlib
        hash_part = hashlib.md5(field_part.encode()).hexdigest()[:6]
        name = f"{model_name.lower()}_{hash_part}_idx"
    return name

def generate_migration_file(app_name, model_indexes):
    """Generate a migration file to add indexes for an app."""
    operations = []
    
    for model_name, field_groups in model_indexes.items():
        for fields in field_groups:
            index_name = generate_index_name(model_name, fields)
            operation = INDEX_OPERATION_TEMPLATE.format(
                model_name=model_name.lower(),
                fields=fields,
                index_name=index_name
            )
            operations.append(operation)
    
    if not operations:
        return None
    
    last_migration = get_last_migration(app_name)
    migration_content = MIGRATION_TEMPLATE.format(
        app_name=app_name,
        last_migration=last_migration,
        operations='\n'.join(operations)
    )
    
    # In a real implementation, this would create the migration file
    # For this script, we'll just return the content
    return migration_content

def main():
    """Main function to generate migration files for all apps."""
    for app_name, model_indexes in INDEXES_TO_ADD.items():
        migration_content = generate_migration_file(app_name, model_indexes)
        if migration_content:
            print(f"Generated migration for {app_name}:")
            print(migration_content)
            print("-" * 80)

if __name__ == "__main__":
    main()
"""
