version: "3.8"

services:
  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ../.env
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    networks:
      - queueme_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6-alpine
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ../config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - queueme_network

  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    command: gunicorn queueme.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - ..:/app
    env_file:
      - ../.env
    environment:
      - DJANGO_SETTINGS_MODULE=queueme.settings.production
    depends_on:
      - db
      - redis
    networks:
      - queueme_network

  celery:
    build:
      context: ..
      dockerfile: docker/Dockerfile.celery
    command: celery -A queueme worker -l INFO
    volumes:
      - ..:/app
    env_file:
      - ../.env
    environment:
      - DJANGO_SETTINGS_MODULE=queueme.settings.production
    depends_on:
      - db
      - redis
    networks:
      - queueme_network

  celery-beat:
    build:
      context: ..
      dockerfile: docker/Dockerfile.celery
    command: celery -A queueme beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ..:/app
    env_file:
      - ../.env
    environment:
      - DJANGO_SETTINGS_MODULE=queueme.settings.production
    depends_on:
      - db
      - redis
    networks:
      - queueme_network

networks:
  queueme_network:

volumes:
  postgres_data:
  redis_data:
